import Head from "next/head"
import { useFetchUsers } from "@/features/users/useFetchUsers.js"
import { useFormik } from "formik"
import {
  Heading,
  Container,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Spinner,
  VStack,
  FormControl,
  FormLabel,
  Input,
  Button,
  useToast,
} from "@chakra-ui/react"
import TbodyC from "@/components/Tbody"
import { useCreateUsers } from "@/features/users/useCreateUsers"
import { useDeleteUsers } from "@/features/users/useDeleteUsers"
import { useUpdateUsers } from "@/features/users/useUpdateUsers"
import { useRef } from "react"

export default function Home() {
  const toBottom = useRef(null)
  const {
    data,
    isLoading: isLoadingUsers,
    refetch: refetchUsers,
  } = useFetchUsers({
    onError: () => {
      Toast({
        title: "Internal Server Error",
        status: "error",
      })
    },
  })
  const Toast = useToast()

  const formik = useFormik({
    initialValues: {
      id: "",
      name: "",
      email: "",
      gender: "",
    },
    onSubmit: () => {
      const { name, email, gender, id } = formik.values
      if (id) {
        updateUser({
          name,
          email,
          gender,
          id,
        })
        Toast({
          title: "Success Update User",
          status: "success",
        })
      } else {
        createUser({
          name,
          email,
          gender,
          status: "inactive",
        })
        Toast({
          title: "Success Add User",
          status: "success",
        })
      }

      formik.setFieldValue("id", "")
      formik.setFieldValue("name", "")
      formik.setFieldValue("email", "")
      formik.setFieldValue("gender", "")
    },
  })

  const { mutate: createUser, isLoading: isLoadingCreateUser } = useCreateUsers(
    {
      onSuccess: () => {
        refetchUsers()
      },
      onError: () => {
        Toast({
          title: "Failed Create User",
          status: "error",
        })
      },
    }
  )

  const { mutate: deleteUser, isLoading: isLoadingDeleteUser } = useDeleteUsers(
    {
      onSuccess: () => {
        refetchUsers()
      },
      onError: () => {
        Toast({
          title: "Failed Delete User",
          status: "error",
        })
      },
    }
  )

  const { mutate: updateUser, isLoading: isLoadingUpdateUser } = useUpdateUsers(
    {
      onSuccess: () => {
        refetchUsers()
      },
      onError: () => {
        Toast({
          title: error,
          status: "error",
        })
      },
    }
  )

  const handleChangeInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value)
  }

  const handleUpdate = (user) => {
    toBottom.current?.scrollIntoView({behavior: 'smooth'});
    formik.setFieldValue("id", user.id)
    formik.setFieldValue("name", user.name)
    formik.setFieldValue("email", user.email)
    formik.setFieldValue("gender", user.gender)
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ padding: "20px" }}>
        <Heading
          style={{
            textAlign: "center",
            marginTop: "20px",
            marginBottom: "20px",
          }}
        >
          Table Employees
        </Heading>
        <Table
          variant="striped"
          colorScheme="gray"
          _hover={{
            backgroundColor: "#bfc8d6",
            transition: "all 0.20s ease-in-out",
          }}
          __css={{ marginBottom: "50px", width: "100%" }}
        >
          <Thead>
            <Tr>
              <Th>ID</Th>
              <Th>Name</Th>
              <Th>Email</Th>
              <Th>Gender</Th>
              <Th colSpan={2}>Action</Th>
            </Tr>
          </Thead>
          <Tbody>
            {!!isLoadingUsers && <Spinner />}
            <TbodyC
              data={data}
              deleteProduct={deleteUser}
              isLoading={isLoadingDeleteUser}
              handleUpdate={handleUpdate}
            />
          </Tbody>
        </Table>
        <Container>
          <form onSubmit={formik.handleSubmit} ref={toBottom}>
            <VStack spacing={4}>
              <FormControl>
                <FormLabel>Id User</FormLabel>
                <Input
                  onChange={handleChangeInput}
                  name="id"
                  value={formik.values.id}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Name</FormLabel>
                <Input
                  onChange={handleChangeInput}
                  name="name"
                  value={formik.values.name}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Email</FormLabel>
                <Input
                  onChange={handleChangeInput}
                  name="email"
                  value={formik.values.email}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Gender</FormLabel>
                <Input
                  onChange={handleChangeInput}
                  name="gender"
                  value={formik.values.gender}
                />
              </FormControl>
              <Button disabled={isLoadingCreateUser} type="submit">
                {isLoadingCreateUser ? (
                  <Spinner />
                ) : formik.values.id ? (
                  "Update User"
                ) : (
                  "Add User"
                )}
              </Button>
            </VStack>
          </form>
        </Container>
      </main>
    </>
  )
}
